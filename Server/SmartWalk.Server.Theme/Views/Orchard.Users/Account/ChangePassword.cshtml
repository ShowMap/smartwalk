@using SmartWalk.Server.Common.Utils
@model dynamic
@{
    Layout.Title = T("Change Password");

    var action = (string)ViewData["FormActionController"] ?? "ChangePassword";
    var isCurrentPasswordVisible = 
        !ViewData.ContainsKey("IsCurrentPasswordVisible") || (bool)ViewData["IsCurrentPasswordVisible"];
}
<div class="row double-gap bottom-gap">
    <div class="col-md-6 col-md-offset-3">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">@Layout.Title</h3>
            </div>
            <div class="panel-body">
        @using (Html.BeginFormAntiForgeryPost(
            Url.Action(action), 
            FormMethod.Post, 
            new { @class = "form-horizontal" })) {
                if (isCurrentPasswordVisible)
                {
                <div class="form-group">
                    @* ReSharper disable Html.IdNotResolved *@
                    <label for="currentPassword" class="col-sm-4 control-label">@T("Current password")</label>
                    @* ReSharper restore Html.IdNotResolved *@
                    <div class="col-sm-8">
                        @Html.Password("currentPassword", string.Empty, new { @class = "form-control", autofocus = "autofocus", placeholder = "Password" })
                        @HtmlUtil.HelpBlockForValidation(Html.ValidationMessage("currentPassword", new { @class = "text-danger" }), new { @class = "help-block" })
                    </div>
                </div>
                }
                <div class="form-group">
                    @* ReSharper disable Html.IdNotResolved *@
                    <label for="newPassword" class="col-sm-4 control-label">@T("New password")</label>
                    @* ReSharper restore Html.IdNotResolved *@
                    <div class="col-sm-8">
                        @Html.Password("newPassword", string.Empty, new { @class = "form-control", placeholder = "Password"  })
                        <span class="help-block">@T("New passwords are required to be a minimum of {0} characters in length.", ViewData["PasswordLength"])</span>
                        @HtmlUtil.HelpBlockForValidation(Html.ValidationMessage("newPassword", new { @class = "text-danger" }), new { @class = "help-block" })
                    </div>
                </div>
                <div class="form-group">
                    @* ReSharper disable Html.IdNotResolved *@
                    <label for="confirmPassword" class="col-sm-4 control-label">@T("Confirm password")</label>
                    @* ReSharper restore Html.IdNotResolved *@
                    <div class="col-sm-8">
                        @Html.Password("confirmPassword", string.Empty, new { @class = "form-control", placeholder = "Password"  })
                        @HtmlUtil.HelpBlockForValidation(Html.ValidationMessage("confirmPassword", new { @class = "text-danger" }), new { @class = "help-block" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-offset-4 col-sm-8">
                        <button type="submit" class="btn btn-primary">@T("Change Password")</button>
                        <button type="reset" class="btn btn-default">@T("Reset")</button>
                    </div>
                </div>
            }
            </div>
        </div>
        
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-warning" role="alert">
            <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
            @Html.ValidationSummary(T("Password changing was unsuccessful. Please correct the errors and try again.").ToString()) 
        </div>
    }
    </div>
</div>