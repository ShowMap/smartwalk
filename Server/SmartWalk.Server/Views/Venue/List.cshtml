@using SmartWalk.Server.ViewModels
@{
    Script.Require("jQueryUI").AtFoot();
    Script.Require("SmartWalk.ViewModels").AtFoot();
    Script.Require("ImageScale").AtFoot();

    var model = (ListViewVm)Model;
    var parameters = model.Parameters;
    var items = (IList<EntityVm>)model.Data;
}
<div id="entity-items" get-venues-url="@Url.Action("GetVenues", "Venue", new {area = "SmartWalk.Server"})">
    @Html.AntiForgeryTokenOrchard()  
    @Html.HiddenFor(m => model.Parameters.Sort)  
    <div class="container">
        <div class="row">
            <div class="col-xs-8">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="@T("Type venue name...")">
                    <span class="input-group-btn">
                        <button class="btn btn-default" type="button">@T("Search")</button>
                    </span>
                </div>
            </div>
            @if (parameters.IsLoggedIn) {
                <div class="col-xs-4 text-right">
                    <form action="/venues/create">
                        <button type="submit" class="btn btn-primary">@T("Create venue")</button>
                    </form>
                </div>
            }
        </div>
        
        @if (parameters.IsLoggedIn) {
            <div class="gap">
                <small>
                    <a href="/venues?Parameters.Display=All">@T("All Venues")</a>&nbsp;|&nbsp;<a href="/venues?Parameters.Display=My">@T("My Venues")</a>
                </small>
            </div>
        }

        <div class="floating-container small-gap">
        @foreach (var item in items) {
            <a class="thumbnail floating bg-image-container" href="@Url.Action("View", new {entityId = item.Id})">
                <div class="header">
                    <h3>@item.DisplayName</h3>
			
                    <img class="scale" data-scale="best-fill" data-align="center" src="@item.Picture">
                </div>
				
                <!-- TODO: to render address
                <div class="info">
                    <h4></h4>
                </div> -->
            </a>
        }
            <!-- ko template: {name: "EntityItemTemplate", foreach: Items() } -->    
            <!-- /ko -->
            <div class="clearfix"/>
        </div>           
    </div>
</div>

<script type="text/html" id="EntityItemTemplate">
    <a class="thumbnail floating bg-image-container" data-bind="attr: {href: '/venue/' + Id()}">
        <div class="header">
            <h3 data-bind="text: DisplayName"></h3>
			
            <img class="scale" data-scale="best-fill" data-align="center" data-bind="attr: {src: Picture}">
        </div>
				
        <!-- TODO: to render address
        <div class="info">
            <h4></h4>
        </div>-->
    </a>
</script>

@using (Script.Foot())
{
<script type="text/javascript">
    function VenuesViewModel() {
        var self = this;

        self.Items = ko.observableArray();
        self.currentPage = ko.observable(1);

        self.getNextPage = function() {
            return getData(self.currentPage() + 1);
        };

        function getData(pageNumber) {
            if (self.currentPage() != pageNumber) {
                console.log("Scroll Postion begin getData" + $(window).scrollTop());
                var ajdata = { pageNumber: pageNumber, parameters: @Html.Raw(Json.Encode(parameters)) };
                var urlUpdate = $("#entity-items").attr("get-venues-url");

                var config = {
                    async: true,
                    url: urlUpdate,
                    type: "POST",
                    data: JSON.stringify(ajdata),
                    dataType: "json",
                    cache: false,
                    contentType: "application/json; charset=utf-8",
                    error: function(e) {
                        //window.location.href = "@Url.Action("List")";
                    },
                    success: function(data) {
                        if (data.length > 0) {
                            self.currentPage(self.currentPage() + 1);
                            for (var i = 0; i < data.length; i++) {
                                self.Items.push(new EntityViewModel(data[i]));
                                $("img.scale").imageScale();
                                console.log("Scroll Postion looping ViewModel" + $(window).scrollTop());
                            }
                        }
                    }
                };

                $.ajax(config);
            }
        }
    }

    $(document).ready(function() {
        var viewModel = new VenuesViewModel();

        ko.applyBindings(viewModel, document.getElementById('entity-items'));

        $(window).scroll(function(evt) {
            evt.preventDefault();
            if ($(window).scrollTop() >= $(document).height() - $(window).height()) {
                console.log("Scroll Postion" + $(window).scrollTop());
                viewModel.getNextPage();
            }
        });
    });
    
    $(function() {
        $("img.scale").imageScale();
    });
</script>
}