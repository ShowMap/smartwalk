@using SmartWalk.Server.Records
@using SmartWalk.Server.ViewModels

@{
    //Style.Require("SmartWalk.Host");
    
    Script.Require("jQueryUI").AtHead();
    Script.Require("SmartWalk.ViewModels").AtHead();
    
    var venue = (EntityVm) Model;
    var cancelAction = venue.Id == 0 ? Url.Action("List") : Url.Action("View", new { entityId = @venue.Id });
}

<div id="edit-venue-form" 
     save-venue-url="@Url.Action("SaveOrAdd", "Venue", new {area = "SmartWalk.Server"})" 
     get-address-url ="@Url.Action("GetAddress", "Event", new {area = "SmartWalk.Server"})"
     save-address-url ="@Url.Action("SaveAddress", "Event", new {area = "SmartWalk.Server"})"
     delete-addresses-url ="@Url.Action("DeleteAddresses", "Event", new {area = "SmartWalk.Server"})"
     get-contact-url ="@Url.Action("GetContact", "Event", new {area = "SmartWalk.Server"})"
     save-contact-url ="@Url.Action("SaveContact", "Event", new {area = "SmartWalk.Server"})"
     delete-contacts-url ="@Url.Action("DeleteContacts", "Event", new {area = "SmartWalk.Server"})">
    @Html.AntiForgeryTokenOrchard()
    <div id="venue-panel">
        
        <div class="row">
            <div class="col-xs-8">
                <div class="form-group">
                    <input class="form-control" type="text" placeholder="@T("Type venue name...")" data-bind="value: Name" />
                </div>
            </div>
            <div class="col-xs-4 text-right">
                <!--<button type="button" class="btn btn-success" data-bind="click: saveOrAdd">@T("Save Venue")</button>-->
            </div>
        </div>
        
        <div class="row">
			<div class="col-sm-8">
				<div class="form-group">
					<label for="pictureTextInput">@T("Picture"):</label>
					<input id="pictureTextInput" class="form-control" type="text" placeholder="@T("Paste picture URL")" data-bind="value: Picture" />
				</div>
			</div>
		</div>
        
        <div class="row">
			<div class="col-sm-8">
				<div class="form-group">
					<label for="descriptionTextArea">@T("Description"):</label>
					<textarea class="form-control" id="descriptionTextArea" data-bind="value: Description"></textarea>
				</div>
			</div>
		</div>
        
        <iframe data-bind="attr: { src: GetMapLink() }, visible: IsMapVisible" class="map-container" frameborder="0"></iframe>
        
        <div class="row">
			<div class="col-sm-8">
				<table class="table table-hover addresses-table" data-bind="visible: Addresses().length > 0">
					<thead>
						<tr>
							<th><h4>@T("Addresses")</h4></th>
							<th class="td-align">
								<div class="input-group-btn" style="display:inline">
								    <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
								        <input type="checkbox" data-bind="checked: AllAddressesChecked"/><span class="caret"></span>
								    </button>
									<ul class="dropdown-menu">
										<li><a href="#">@T("Duplicate")</a></li>
										<li data-bind="visible: IsAnyAddressSelected"><a href="#" data-bind="click: $root.deleteAddresses">@T("Delete")</a></li>
									</ul>
								</div>
							</th>
						</tr>
					</thead>
					<tbody data-bind="template: { name: getAddressView, foreach: Addresses() }"></tbody>
				</table>
				
				<button type="button" class="btn btn-default" data-bind="click: addAddress">@T("Add Address")</button>
			</div>
		</div>
        
        <div class="row gap">
			<div class="col-sm-8">
				<table class="table table-hover" data-bind="visible: Contacts().length > 0">
					<thead>
						<tr>
							<th>@T("Contact Type")</th>
							<th><h4>@T("E-mail, Phone or Web-Site")</h4></th>
							<th class="td-align">
								<div class="input-group-btn" style="display:inline">
									<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
										<input type="checkbox" data-bind="checked: AllContactsChecked"/> <span class="caret"></span>
									</button>
									<ul class="dropdown-menu">
										<li><a href="#">@T("Duplicate")</a></li>
										<li data-bind="visible: IsAnyContactSelected"><a href="#" data-bind="click: $root.deleteContacts">@T("Delete")</a></li>
									</ul>
								</div>
							</th>
						</tr>
					</thead>
					<tbody data-bind="template: { name: getContactView, foreach: Contacts() }"></tbody>
				</table>
				
				<button type="button" class="btn btn-default" data-bind="click: addContact">Add Contact</button>
			</div>
		</div>

        <div class="row double-gap">
            <div class="col-xs-4">
                @{ using(Html.BeginForm("Delete", "Venue", FormMethod.Get)) {
                    <input type="hidden" name="entityId" value="@venue.Id" />
                    <button type="submit" class="btn btn-danger" >@T("Delete Venue")</button>
                }}
                
            </div>
            <div class="col-xs-8 text-right">                
                <button type="submit" class="btn btn-default" data-bind="click: cancel">@T("Cancel")</button>
                <button type="button" class="btn btn-success" data-bind="click: saveOrAdd">@T("Save Venue")</button>
            </div>
		</div>

    </div>
</div>

@Html.Partial("Templates")

<script>
    $(function () {
        var vmVenue = new EntityViewModel(@Html.Raw(Json.Encode(venue)));

        vmVenue.getContactView = function (item) {
            return item === vmVenue.selectedItem() ? 'EditContactTemplate' : "ViewContactTemplate";
        };

        vmVenue.GetContactTypeById = function(id) {
            switch (id) {
                case "0":
                    return "@T("E-mail")";
                case "1":
                    return "@T("Web")";
                case "2":
                    return "@T("Phone")";
                default:
                    return "@T("Contact")";
            }
        };
        
        vmVenue.GetContactType = function (item) {
            return vmVenue.GetContactTypeById(item.Type());
        };

        vmVenue.cancelContact = function (item) {
            if (item.Id() == 0) {
                //item.State(2);
                vmVenue.selectedItem(null);
                vmVenue.AllContacts.remove(item);
            } else {
                var ajdata = ko.toJSON(item);
                var urlUpdate = $("#edit-venue-form").attr("get-contact-url");

                var config = {
                    async: true,
                    url: urlUpdate,
                    type: "POST",
                    data: ajdata,
                    dataType: "json",
                    cache: false,
                    contentType: "application/json; charset=utf-8",
                    error: function (e) {
                        vmVenue.selectedItem(null);
                    },
                    success: function (data) {
                        item.loadData(data);
                        vmVenue.selectedItem(null);
                    }
                };
                $.ajax(config);
            }
        };

        vmVenue.saveContact = function (item) {
            var ajdata = ko.toJSON(item);
            var urlUpdate = $("#edit-venue-form").attr("save-contact-url");

            var config = {
                async: true,
                url: urlUpdate,
                type: "POST",
                data: ajdata,
                dataType: "json",
                cache: false,
                contentType: "application/json; charset=utf-8",
                error: function (e) {
                    vmVenue.selectedItem(null);
                },
                success: function (data) {
                    if (item.Id() == 0 || item.Id() != data)
                        item.Id(data);

                    vmVenue.selectedItem(null);
                }
            };
            $.ajax(config);
        };

        vmVenue.deleteContacts = function () {
            vmVenue.selectedItem(null);

            var ajdata = ko.toJSON(vmVenue.CheckedContacts);
            var urlUpdate = $("#edit-venue-form").attr("delete-contacts-url");

            var config = {
                async: true,
                url: urlUpdate,
                type: "POST",
                data: ajdata,
                dataType: "json",
                cache: false,
                contentType: "application/json; charset=utf-8",
                error: function (e) {
                },
                success: function (data) {
                    for (var i = 0; i < vmVenue.CheckedContacts().length ; i++) {
                        vmVenue.AllContacts.remove(vmVenue.CheckedContacts()[i]);
                    }
                }
            };
            $.ajax(config);
        };

        vmVenue.getAddressView = function (item) {
            return item === vmVenue.selectedItem() ? 'EditAddressTemplate' : "ViewAddressTemplate";
        };

        vmVenue.cancelAddress = function (item) {
            if (item.Id() == 0) {
                //item.State(2);
                vmVenue.selectedItem(null);
                vmVenue.AllAddresses.remove(item);
            } else {
                var ajdata = ko.toJSON(item);
                var urlUpdate = $("#edit-venue-form").attr("get-address-url");

                var config = {
                    async: true,
                    url: urlUpdate,
                    type: "POST",
                    data: ajdata,
                    dataType: "json",
                    cache: false,
                    contentType: "application/json; charset=utf-8",
                    error: function (e) {
                        vmVenue.selectedItem(null);
                        },
                        success: function (data) {
                            item.loadData(data);
                            vmVenue.selectedItem(null);
                        }
                    };
                    $.ajax(config);
                }
        };        

        vmVenue.saveAddress = function (item) {
            var ajdata = ko.toJSON(item);
            var urlUpdate = $("#edit-venue-form").attr("save-address-url");

            var config = {
                async: true,
                url: urlUpdate,
                type: "POST",
                data: ajdata,
                dataType: "json",
                cache: false,
                contentType: "application/json; charset=utf-8",
                error: function (e) {
                    vmVenue.selectedItem(null);
                    },
                    success: function (data) {
                        if (item.Id() == 0 || item.Id() != data)
                            item.Id(data);

                        vmVenue.selectedItem(null);
                    }
                };
            $.ajax(config);
        };

        vmVenue.deleteAddresses = function () {
            vmVenue.selectedItem(null);
            
            var ajdata = ko.toJSON(vmVenue.CheckedAddresses);
            var urlUpdate = $("#edit-venue-form").attr("delete-addresses-url");

            var config = {
                async: true,
                url: urlUpdate,
                type: "POST",
                data: ajdata,
                dataType: "json",
                cache: false,
                contentType: "application/json; charset=utf-8",
                error: function (e) {
                },
                success: function (data) {
                    for (var i = 0; i < vmVenue.CheckedAddresses().length ; i++) {
                        vmVenue.AllAddresses.remove(vmVenue.CheckedAddresses()[i]);
                    }
                }
            };
            $.ajax(config);
        };        

        vmVenue.GetMapLink = function () {
            var res = "";

            if (vmVenue.Addresses().length > 0) {
                var addr = vmVenue.Addresses()[0];
                return addr.GetMapLink();
            }

            return res;
        };

        vmVenue.cancel = function () {
            $("#edit-venue-form").trigger({
                type: "OnVenueCancelled"
            });
        };

        vmVenue.saveOrAdd = function () {
            $("#venue-panel").html('<img class="loading" src="@Href("../../Images/loading.gif")"/>');

            var ajdata = self ? ko.toJSON(this) : null;
            var urlUpdate = $("#edit-venue-form").attr("save-venue-url");

            var config = {
                async: true,
                url: urlUpdate,
                type: "POST",
                data: ajdata,
                dataType: "json",
                cache: false,
                contentType: "application/json; charset=utf-8",
                error: function (e) {
                    //window.location.href = "@Url.Action("List")";
                },
                success: function (data) {
                    vmVenue.loadData(data);
                    $("#edit-venue-form").trigger({
                        type: "OnVenueSaved",
                        item: vmVenue
                    });
                }
            };
            $.ajax(config);
        };

        ko.applyBindings(vmVenue, document.getElementById('edit-venue-form'));
    });
</script>