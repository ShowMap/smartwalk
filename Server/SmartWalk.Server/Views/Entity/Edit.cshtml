@using SmartWalk.Server.Extensions
@using SmartWalk.Server.Utils
@using SmartWalk.Server.ViewModels
@using SmartWalk.Server.Records
@model EntityVm
@{
    Style.Require("SmartWalk");
    Style.Require("jquery.fileupload");

    Script.Require("SmartWalk.AntiForgery").AtFoot();
    Script.Require("SmartWalk.Editing.Entity").AtFoot();

    var allowedActions = (AllowedActions)ViewData[ViewDataParams.AllowedActions];
    var formId = ViewData[ViewDataParams.EntityFormId] ?? "edit-entity-form";
    var fileUploadId = Model.Type == (int)EntityType.Host ? "hostFileUpload" : "venueFileUpload";
    var dropZoneId = Model.Type == (int)EntityType.Host ? "hostDropzonePanel" : "venueDropzonePanel";
    var entityTypeName = Model.Type == (int)EntityType.Host ? "Organizer" : "Venue";
    var entityController = Model.Type == (int)EntityType.Host ? "Host" : "Venue";
    var cancelAction = Model.Id == 0 
        ? Url.Action("List", entityController, new {display = DisplayType.My}) 
        : Url.Action("View", entityController, new { entityId = @Model.Id });
    var actionCaption = Model.Id == 0 
        ? T("Add <span class=\"hidden-xs\">" + entityTypeName + "</span>") 
        : T("Save <span class=\"hidden-xs\">" + entityTypeName + "</span>");
}

    <div id="@formId">
        @Html.AntiForgeryTokenOrchard()
        @Html.Partial("../ServerErrors")

        <div class="row">
            <div class="col-xs-8">
                <div class="form-group" data-bind="validationElement: model.name">
                    <label class="titleLabel" for="entityNameTextInput">@T(entityTypeName + " Name"):</label>
                    <input id="entityNameTextInput" class="form-control" type="text" placeholder="@T("Type " + entityTypeName.ToLower() + " name...")" data-bind="value: model.name, enable: isEnabled" />
                </div>
            </div>
            <div class="col-xs-4 text-right">
                <div class="action-buttons">
                    <img class="loading" src='@Href("../../Images/loading.gif")' width="16" height="16" alt="Loading..." data-bind="fadeVisible: isBusy" />
                    <button type="button" class="btn btn-success" data-bind="click: saveEntity, enable: isEnabled">@actionCaption</button>                    
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="col-sm-8">
                @Html.Partial("../FileUpload", new ViewDataDictionary
			    {
				    { "inputId", fileUploadId },
                    { "dropZoneId", dropZoneId }
			    })
            </div>
        </div>
        
        <div class="row">
	        <div class="col-sm-8">
                <div class="form-group" data-bind="validationElement: model.description">
                    <label for="descriptionTextArea">@T("Description"):</label>
                    <textarea class="form-control" id="descriptionTextArea" rows="4" data-bind="value: model.description, enable: isEnabled"></textarea>
                </div>
	        </div>
        </div>
        
    @if (Model.Type == EntityType.Venue)
    {
        <div class="row">
            <div class="col-sm-8">
                <table class="table table-hover addresses-table" data-bind="visible: addressesManager.items() && addressesManager.items().length > 0">
                    <thead>
                        <tr>
                            <th><h4>@T("Addresses")</h4></th>
                            <th class="td-align"></th>
                        </tr>
                    </thead>
                    <tbody data-bind="template: { name: addressesManager.getItemView, foreach: addressesManager.items() }"></tbody>
                </table>
				
                <div class="add-item-container">
                    <a data-bind="click: function() { if (isEnabled()) addressesManager.addItem(); }, css: {disabled: !isEnabled()}"><span class="glyphicon glyphicon-plus-sign"></span> @T("Add Address")</a>
                </div>
            </div>
        </div>
    }  
        <div class="row gap">
            <div class="col-sm-8">
                <table class="table table-hover" data-bind="visible: contactsManager.items() && contactsManager.items().length > 0">
                    <thead>
                        <tr>
                            <th>@T("Contact Type")</th>
                            <th><h4>@T("E-mail, Phone or Web-Site")</h4></th>
                            <th class="td-align"></th>
                        </tr>
                    </thead>
                    <tbody data-bind="template: { name: contactsManager.getItemView, foreach: contactsManager.items() }"></tbody>
                </table>
                
                <div class="add-item-container">
                    <a data-bind="click: function() { if (isEnabled()) contactsManager.addItem(); }, css: {disabled: !isEnabled()}"><span class="glyphicon glyphicon-plus-sign"></span> @T("Add Contact")</a>
                </div>
            </div>
        </div>

        <div class="row double-gap action-buttons">
            <div class="col-xs-4">
        @if (Model.Id != 0) {
            using(Html.BeginForm("Delete", null, FormMethod.Get)) {
                <input type="hidden" name="entityId" value="@Model.Id" />
                <button type="submit" class="btn btn-danger" @{if (!allowedActions.CanDelete) { <text>disabled="disabled"</text> } else { <text>data-bind="enable: isEnabled"</text> } } onclick="return confirm('@T("Are you sure you want to delete this " + entityTypeName.ToLower() + "?")')">@T("Delete <span class=\"hidden-xs\">" + entityTypeName + "</span>")</button>
            if (!allowedActions.CanDelete) { <a class="tooltip-container to-button" href="javascript: void(0)" rel="tooltip" data-placement="right" title='@("Can't delete this " + entityTypeName + " because it has linked events.")'><span class="glyphicon glyphicon-exclamation-sign text-danger"></span></a> }
            }
        }
            </div>
            
            <div class="col-xs-8 text-right">
                <img class="loading" src='@Href("../../Images/loading.gif")' width="16" height="16" alt="Loading..." data-bind="fadeVisible: isBusy" />         
                <button type="button" class="btn btn-default" data-bind="click: cancelEntity">@T("Cancel")</button>
                <button type="button" class="btn btn-success" data-bind="click: saveEntity, enable: isEnabled">@actionCaption</button>
            </div>
        </div>   
    </div> 

@using (Script.Foot())
{
    @Display(New.GoogleMapsApi())
    @Html.Partial("../Entity/Templates")

<script type="text/javascript">
    $(function() {
        $("a.tooltip-container").tooltip();

        var data = @Html.Raw(JsonConvert.SerializeObject(Model, JsonNetResult.Settings));

        var settings = settings || [];
        settings = $.extend(settings, {
            unsavedChangesMessage: '@T("There are unsaved changes made to the {0}.", entityTypeName.ToLower())',
            nameRequiredValidationMessage: '@T("Name can not be empty.")',
            nameLengthValidationMessage: '@T("Name can not be longer than 255 characters.")',
            descriptionLengthValidationMessage: '@T("Description can not be longer than 3000 characters.")',

            addressMessages: {
                addressLengthValidationMessage: '@T("Address can not be longer than 255 characters.")',
                addressLatitudeValidationMessage: '@T("Latitude can not be empty.")',
                addressLongitudeValidationMessage: '@T("Longitude can not be empty.")',
                addressTipValidationMessage: '@T("Address tip can not be longer than 255 characters.")',
            },

            contactMessages: {
                contactLengthValidationMessage: '@T("Contact can not be longer than 255 characters.")',
                contactRequiredValidationMessage: '@T("Contact can not be empty.")',
                contactTitleValidationMessage: '@T("Contact title can not be longer than 255 characters.")',
                contactWebValidationMessage: '@T("Contact does not match URL pattern.")',
                contactEmailValidationMessage: '@T("Contact does not match email pattern.")',
                contactPhoneValidationMessage: '@T("Contact does not match phone pattern.")',
            },

            validationUrl: '@Url.Action("Validate", entityController)',
            entitySaveUrl: '@Url.Action("SaveEntity", entityController)',
            entityAfterCancelAction: function() {
                window.location.href = "@cancelAction";
            },
            entityAfterSaveAction: function(id) {
                window.location.href = '@Url.Action("View", entityController, new { entityId = ""})/' + id;
            },

            addressView: "viewAddressTemplate",
            addressEditView: "editAddressTemplate",

            contactView: "viewContactTemplate",
            contactEditView: "editContactTemplate",
            contactTypes: ['@T("E-mail")', '@T("Web")', '@T("Phone")'],
        });

        var entityVm = new EntityViewModelExtended(settings, data);
        ko.applyBindings(entityVm, document.getElementById("@formId"));

        sw.initFileUpload(
            "#@fileUploadId", 
            "@Url.Action("UploadImage", "File")", 
            entityVm, entityVm.uploadManager, 
            "#@dropZoneId");

    @if (Model.Type == EntityType.Venue)
    {
        <text>
        if (sw && sw.maps && sw.maps.mapsLoadedCallbacks) {
            sw.maps.mapsLoadedCallbacks.push(function() {
                EntityViewModelExtended.setupAutocompleteAddress(entityVm);
            });
        }
        </text>
    }
    });
</script>
}