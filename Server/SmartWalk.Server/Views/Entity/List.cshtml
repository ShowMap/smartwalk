@using Orchard.UI.Resources
@using SmartWalk.Server.Common.Utils
@using SmartWalk.Server.Extensions
@using SmartWalk.Server.Records
@using SmartWalk.Server.Utils
@using SmartWalk.Server.ViewModels
@model IList<EntityVm>
@{
    Style.Require("SmartWalk");

    Script.Require("ImageScale").AtFoot();
    Script.Require("SmartWalk.AntiForgery").AtFoot();
    Script.Require("SmartWalk.Common").AtFoot();

    var allowedActions = (AllowedActions)ViewData[ViewDataParams.AllowedActions];
    var parameters = (ListViewParametersVm)ViewData[ViewDataParams.ListParams];
    var entityTypeName = (EntityType)ViewData["sw.entityType"] == EntityType.Host ? "Organizer" : "Venue";
    var entityTypesName = (EntityType)ViewData["sw.entityType"] == EntityType.Host ? "Organizers" : "Venues";
    var entitiesUrl = Url.Action("List", new {display = DisplayType.All}); 
    var myEntitiesUrl = Url.Action("List", new {display = DisplayType.My});

    Layout.Title =  parameters.Display == DisplayType.My 
        ? T("My {0}", T(entityTypesName)) 
        : T(entityTypesName);
}
    <div id="entity-items">
        @Html.AntiForgeryTokenOrchard()

        <div class="row">
            <div class="col-xs-8">
                <input id="searchInput" type="text" class="form-control" placeholder="@T("Search " + entityTypesName.ToLower() + "...")" data-bind="value: query, valueUpdate: 'afterkeydown'">
            </div>
        @if (allowedActions.CanCreate) {
            <div class="col-xs-4">
                <form action="@Url.Action("Create")">
                    <button type="submit" class="btn btn-primary">@HtmlUtil.AdaptiveCapture("Create", entityTypeName)</button>
                </form>                
            </div>
        }
        </div>
        
    @if (WorkContext.CurrentUser != null) {
        <div class="gap toolbar">
            <small>
                @{
                     var allLinkClass = parameters.Display == DisplayType.All ? "selected" : "default";
                }
                <a class="@allLinkClass" href="@entitiesUrl">@T("All " + entityTypesName)</a>
                &nbsp;|&nbsp;
                @{
                    var myLinkClass = parameters.Display == DisplayType.My ? "selected" : "default";
                }
                <a class="@myLinkClass" href="@myEntitiesUrl">@T("My " + entityTypesName)</a>
            </small>
        </div>
    }

        <div id="entity-items-thumbs" class="floating-container small-gap">
     @{
        var res = ResourceManager.FindResource(new RequireSettings { Name = "SmartWalk.List.Initial", Type = "script" });
        if (res != null)
        {
            <script type="text/javascript">
                @HtmlUtil.Resource(res, WorkContext);
                
                var thumbsContext = { defaultWidth: 300 };

                function fitThumbs() {
                    sw.fitThumbs("entity-items-thumbs", ".floating .header", thumbsContext);
                }

                fitThumbs();
            </script>
        }
    }           
        @foreach (var entityVm in Model) {
            <a class="thumbnail floating bg-image-container default-rows" href="@Url.Action("View", new {entityId = entityVm.Id})">
                <div class="header">
                    <h3>@entityVm.Name</h3>
			
                    <img class="scale" data-scale="best-fill" data-align="center" src="@entityVm.Picture" alt="">
                </div>

                @if (entityVm.HasAddresses())
                {
                <div class="info">
                    @{ var address = entityVm.FirstAddress(); }
                    <h5><address>@address.Address</address></h5>
                </div>
                }
            </a>
        }
            <!-- ko template: {name: "entityItemTemplate", foreach: items(), afterRender: sw.scaleImages } -->    
            <!-- /ko -->

            <div class="clearfix"></div>
        </div>

    @if (Model == null || Model.Count == 0)
    {
        <div class="empty-content-placeholder">
            @if (parameters.Display == DisplayType.My && allowedActions.CanCreate)
            {
                <p class="text-muted">@T("You do not have any created {0} yet. Please start with creating a new one.", @entityTypesName.ToLower())</p>
                <form action="@Url.Action("Create")">
                    <button type="submit" class="btn btn-primary">@HtmlUtil.AdaptiveCapture("Create", entityTypeName)</button>
                </form>
            }
            else
            {
                <p class="text-muted">@T("There are no {0} available at the moment.", @entityTypesName.ToLower())</p>
            } 
        </div>
    }

        <div class="empty-content-placeholder" data-bind="fadeInVisible: searchedQuery() && (!items() || items().length == 0)">
            <p data-bind="html: '@T("Your search - <b>{{0}}</b> - did not match any {0}.", @entityTypesName.ToLower())'.format(searchedQuery())"></p>
        </div>
        
        <div class="gap">
@Html.Partial("../ServerErrors")
        </div>

        <div class="gap text-center">
            <img class="loading" src='@Href("../../Images/loading.gif")' width="16" height="16" alt="Loading..." data-bind="fadeVisible: isBusy" />
        </div>
    </div>

@using (Script.Foot())
{
<script type="text/html" id="entityItemTemplate">
    <a class="thumbnail floating bg-image-container" data-bind="attr: {href: '@Url.Action("View", new { entityId = ""})/' + id()}">
        <div class="header">
            <h3 data-bind="text: name"></h3>
			
            <img class="scale" data-scale="best-fill" data-align="center" data-bind="attr: {src: picture}" alt="">
        </div>
				
        <div class="info">
            <h5><address data-bind="text: addresses() && addresses().length > 0 ? addresses()[0].address() : ''"></address></h5>
        </div>
    </a>
</script>

<script type="text/javascript">
    EntitiesViewModel = function(data, url) {
        var self = this;

        EntitiesViewModel.superClass_.constructor.call(self, data, url);

        self.addItem = function(entity) {
            self.items.push(new EntityViewModel(entity));
        };
    };

    sw.inherits(EntitiesViewModel, ListViewModel);

    $(function() {
        var viewModel = new EntitiesViewModel(
            @Html.Raw(JsonConvert.SerializeObject(parameters, JsonNetResult.Settings)), 
            '@Url.Action("GetEntities")');

        sw.attachVerticalScroll(viewModel.getNextPage);
        
        ko.applyBindings(viewModel, document.getElementById("entity-items"));
        
        $("#searchInput").keypress(function() {
            $("a").remove(".default-rows");
        });
        
        $("img.scale").imageScale();
        
        $(window).resize(function() {
            if (typeof fitThumbs !== "undefined") {
                fitThumbs();
            }
        });
    });
</script>
}