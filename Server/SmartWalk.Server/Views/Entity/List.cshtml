@using SmartWalk.Server.Extensions
@using SmartWalk.Server.Records
@using SmartWalk.Server.Utils
@using SmartWalk.Server.ViewModels
@model ListViewVm<EntityVm>
@{
    Style.Require("SmartWalk");

    Script.Require("ImageScale").AtFoot();
    Script.Require("SmartWalk.AntiForgery").AtFoot();
    Script.Require("SmartWalk.Common").AtFoot();

    var entityTypeName = (EntityType)ViewData["EntityType"] == EntityType.Host ? "Organizer" : "Venue";
    var entityTypesName = (EntityType)ViewData["EntityType"] == EntityType.Host ? "Organizers" : "Venues";
    var entitiesUrl = Url.Action("List", new {display = DisplayType.All}); 
    var myEntitiesUrl = Url.Action("List", new {display = DisplayType.My});
}
    <div id="entity-items">
        @Html.AntiForgeryTokenOrchard()

        <div class="row">
            <div class="col-xs-8">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="@T("Type " + entityTypeName.ToLower() + " name...")" data-bind="value: query">
                    <span class="input-group-btn">
                        <button id="btnSearch" class="btn btn-default" type="button">@T("Search")</button>
                    </span>
                </div>
            </div>
        @if (WorkContext.CurrentUser != null) {
            <div class="col-xs-4">
                <form action="@Url.Action("Create")">
                    <button type="submit" class="btn btn-primary">@T("Create <span class=\"hidden-xs\">" + entityTypeName + "</span>")</button>
                </form>                
            </div>
        }
        </div>
        
    @if (WorkContext.CurrentUser != null) {
        <div class="gap toolbar">
            <small>
                @{
                     var allLinkClass = Model.Parameters.Display == DisplayType.All ? "selected" : "default";
                }
                <a class="@allLinkClass" href="@entitiesUrl">@T("All " + entityTypesName)</a>
                &nbsp;|&nbsp;
                @{
                    var myLinkClass = Model.Parameters.Display == DisplayType.My ? "selected" : "default";
                }
                <a class="@myLinkClass" href="@myEntitiesUrl">@T("My " + entityTypesName)</a>
            </small>
        </div>
    }

        <div class="floating-container small-gap">
        @foreach (var entityVm in Model.Data) {
            <a class="thumbnail floating bg-image-container default-rows" href="@Url.Action("View", new {entityId = entityVm.Id})">
                <div class="header">
                    <h3>@entityVm.Name</h3>
			
                    <img class="scale" data-scale="best-fill" data-align="center" src="@entityVm.Picture">
                </div>

                @if (entityVm.HasAddresses())
                {
                <div class="info">
                    @{ var address = entityVm.FirstAddress(); }
                    <h5><address>@address.Address</address></h5>
                </div>
                }
            </a>
        }
            <!-- ko template: {name: "entityItemTemplate", foreach: items(), afterRender: sw.scaleImages } -->    
            <!-- /ko -->

            <div class="clearfix"></div>
        </div>

@Html.Partial("../ServerErrors")

        <div class="gap text-center">
            <img class="loading" src='@Href("../../Images/loading.gif")' width="16" height="16" alt="Loading..." data-bind="fadeVisible: isBusy" />
        </div>
    </div>

@using (Script.Foot())
{
<script type="text/html" id="entityItemTemplate">
    <a class="thumbnail floating bg-image-container" data-bind="attr: {href: '@Url.Action("View", new { entityId = ""})/' + id()}">
        <div class="header">
            <h3 data-bind="text: name"></h3>
			
            <img class="scale" data-scale="best-fill" data-align="center" data-bind="attr: {src: picture}" alt="">
        </div>
				
        <div class="info">
            <h5><address data-bind="text: addresses() && addresses().length > 0 ? addresses()[0].address() : ''"></address></h5>
        </div>
    </a>
</script>

<script type="text/javascript">
    EntitiesViewModel = function(data, url) {
        var self = this;

        EntitiesViewModel.superClass_.constructor.call(self, data, url);

        self.addItem = function(entity) {
            self.items.push(new EntityViewModel(entity));
        };
    };

    sw.inherits(EntitiesViewModel, ListViewModel);

    $(function() {
        var viewModel = new EntitiesViewModel(
            @Html.Raw(JsonConvert.SerializeObject(Model.Parameters, JsonNetResult.Settings)), 
            '@Url.Action("GetEntities")');

        sw.attachVerticalScroll(viewModel.getNextPage);
        
        ko.applyBindings(viewModel, document.getElementById("entity-items"));
        
        $("#btnSearch").click(function() {
            $("a").remove(".default-rows");
            viewModel.search();
        });
        
        $("img.scale").imageScale();
    });
</script>
}