@using SmartWalk.Server.Records
@using SmartWalk.Server.ViewModels
@using System.Text.RegularExpressions
@model EntityVm
@{
    Style.Require("SmartWalk");
    Style.Require("TextCollapse");

    Script.Require("ImageScale").AtFoot();
    Script.Require("TextCollapse").AtFoot();
    Script.Require("SmartWalk.AntiForgery").AtFoot();
    Script.Require("SmartWalk.Common").AtFoot();

    var entityTypeName = Model.Type == (int)EntityType.Host ? "Organizer" : "Venue";
}

<div id="view-entity-form" get-entity-events="@Url.Action("GetEvents")">
    @Html.AntiForgeryTokenOrchard()

    <div class="bg-image-container page-header-image">
        <div class="header">
            <h2>
            @if (WorkContext.CurrentUser != null)
            {
                <a class="btn" href='@Url.Action("Edit")'>@T("Edit " + entityTypeName)</a>
            }
                @Model.Name
            </h2>
            @if (!string.IsNullOrEmpty(Model.Picture))
            {
                <img class="scale" data-scale="best-fill" data-align="center" src="@Model.Picture" />
            }
        </div>
			
@if (Model.Addresses.Any(ad => ad.Address != null)) {
        <div class="info addresses-container">
            @foreach (var address in Model.Addresses.Where(ad => ad.Address != null)) {
                <div><h4><address>@Regex.Replace(address.Address, @"\s+", " ")</address> @if (!string.IsNullOrEmpty(address.Tip)) {<i class="description">&nbsp;@address.Tip</i>}</h4></div>                        
            }
        </div>	
}
    </div>

@Html.Partial("../AddressMap/View", Model.ToAddressMapVm())

    <div class="row gap">
        <div class="col-md-7"><p class="description">@Model.Description</p></div>
        <div class="col-md-5 contact-container">
    @if (Model.Contacts.Any()) {
            <div class="well">
                <h4 class="text-center">@T("Contacts and Links")</h4>
                <dl class="dl-horizontal">
        @foreach (var contact in Model.Contacts)
        {
            var title = contact.Title ?? contact.Contact;                             
                             
            switch ((ContactType)contact.Type) {
                case ContactType.Url:
                    var url = contact.Contact.StartsWith("http") ? contact.Contact : string.Format("http://{0}", contact.Contact);
                    <dt>@T("web"):</dt>
                    <dd><a href="@url">@title</a></dd>
                    break;

                case ContactType.Phone:
                    <dt>@T("phone"):</dt>
                    <dd>@contact.Contact</dd>
                    break;

                case ContactType.Email:
                    <dt>@T("email"):</dt>
                    <dd><a href="mailto:@contact.Contact">@title</a></dd>
                    break;
            }
        }
                </dl>
            </div>   
    }                
        </div>
    </div>

    <table class="table table-content" data-bind="visible: eventItems().length > 0">
        <thead>
            <tr><th><h4>@T("Recent Events")</h4></th><th>@T("Date")</th></tr>
        </thead>
        <tbody data-bind='template: {name: "eventItemTemplate", foreach: eventItems() }'></tbody>
    </table>   
</div>     

@using (Script.Foot())
{
    @Display(New.MomentLocalization())

<script type="text/html" id="eventItemTemplate">
    <tr>
        <td>
            <a data-bind="attr: {href: '/event/' + id()}, text: displayName()"></a>
        </td>
        <td data-bind="text: displayDate()"></td>        
    </tr>       
</script>

<script type="text/javascript">
    function EventsViewModel() {
        var self = this;

        self.eventItems = ko.observableArray();

        self.loadData = function() {
            var urlUpdate = $("#view-entity-form").attr("get-entity-events");

            ajaxJsonRequest({ entityId: @Model.Id }, urlUpdate, 
                function(events) {
                    if (events) {
                        self.eventItems($.map(events, 
                            function(event) { return new EventViewModel(event); }));                            
                    }
                });
        };

        self.loadData();
    } 

    $(function() {
        ko.applyBindings(new EventsViewModel(), document.getElementById("view-entity-form"));

        $("img.scale").imageScale();
        $("p.description").textCollapse($(".contact-container").first().height());
    });
</script>
}