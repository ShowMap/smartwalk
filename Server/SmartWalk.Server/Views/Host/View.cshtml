@using SmartWalk.Server.Records
@using SmartWalk.Server.ViewModels
@using System.Text.RegularExpressions
@{
    Style.Require("SmartWalk");
    Style.Require("TextCollapse");

    Script.Require("jQueryUI").AtFoot();
    Script.Require("SmartWalk.ViewModels").AtFoot();
    Script.Require("ImageScale").AtFoot();
    Script.Require("TextCollapse").AtFoot();
    
    var model = (ViewParametersVm)Model;
    var host = (EntityVm)model.Data; 
}
<div id="view-host-form" get-host-events="@Url.Action("GetEvents", "Host", new {area = "SmartWalk.Server"})">
        @Html.AntiForgeryTokenOrchard()
		<div class="bg-image-container page-header-image">
		    <div class="header big">
		        <h2>
		        @if (!model.IsReadOnly) {
		            <button type="button" class="btn" id="btn-edit-venue">@T("Edit Organizer")</button>
		        }
		            @host.DisplayName
		        </h2>
		    @if (!string.IsNullOrEmpty(host.Picture)) {
		        <img class="scale" data-scale="best-fill" data-align="center" src="@host.Picture" />
		    }
		    </div>
		</div>

    @if (host.AllAddresses.Any()) {
        var addressFirst = host.AllAddresses.First();
        var query = Regex.Replace(addressFirst.Address.Replace("&", " "), @",\s+", ",");
        query = Regex.Replace(query, @"\s+", "+");
        <div class="map-container"><iframe src="https://www.google.com/maps/embed/v1/place?q=@query&key=AIzaSyAOwfPuE85Mkr-xoNghkIB7enlmL0llMgo"></iframe></div>
    }
        
        <div class="row gap">
            <div class="col-md-7"><p class="description">@host.Description</p></div>
            <div class="col-md-5 contact-container">
            @if (host.AllContacts.Any()) {
                <div class="well">
                    <h4 class="text-center">@T("Contacts and Links")</h4>
                    <dl class="dl-horizontal">
            @foreach (var contact in host.AllContacts) {
                var title = contact.Title ?? contact.Contact;                             
                             
                switch ((ContactType)contact.Type) {
                    case ContactType.Url:
                        var url = contact.Contact.StartsWith("http") ? contact.Contact : string.Format("http://{0}", contact.Contact);
                        <dt>@T("web"):</dt>
                        <dd><a href="@url">@title</a></dd>
                        break;
                    case ContactType.Phone:
                        <dt>@T("phone"):</dt>
                        <dd>@contact.Contact</dd>
                        break;
                    case ContactType.Email:
                        <dt>@T("email"):</dt>
                        <dd><a href="mailto:@contact.Contact">@title</a></dd>
                        break;
                }
            }
                    </dl>
                </div>   
            }                
            </div>
        </div>     

        <table class="table table-content" data-bind="visible: EventItems().length > 0">
            <thead>
                <tr><th><h4>@T("Recent Events")</h4></th><th>@T("Date")</th></tr>
            </thead>
            <tbody data-bind='template: {name: "eventItemTemplate", foreach: EventItems() }'></tbody>
        </table>        
    </div>

<script type="text/html" id="eventItemTemplate">
    <tr>
        <td>
            <a data-bind="attr: {href: '/event/'+Id()}, text: DisplayName"></a><br/>
            <span class="description" data-bind="text: Description"></span>
        </td>
        <td data-bind="text: StartTime"></td>        
    </tr>       
</script>

@using (Script.Foot())
{
<script type="text/javascript">
    $(document).ready(function() {
        $( "#btn-edit-venue" ).click(function() {
            window.location.href = "@Url.Action("View")" + "/edit";
        });

        function EventsViewModel() {
            var self = this;

            self.EventItems = ko.observableArray();

            self.loadData = function() {
                var ajdata = ko.toJSON({ entityId: @host.Id });
                var urlUpdate = $("#view-host-form").attr("get-host-events");

                ajaxJsonRequest(ajdata, urlUpdate, function(data) {
                    if (data) {
                        self.EventItems($.map(data, function(item) { return new EventViewModel(item); }));                            
                    }
                });                
            };

            self.loadData();            
        }


        ko.applyBindings(new EventsViewModel(), document.getElementById('view-venue-form'));
    });
    
    $(function() {
        $("img.scale").imageScale();
        $("p.description").textCollapse($(".contact-container").first().height());
    });
</script>
}