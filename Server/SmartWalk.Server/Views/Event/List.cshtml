@using SmartWalk.Server.ViewModels
@model ListViewVm
@{
    Style.Require("SmartWalk");

    Script.Require("ImageScale").AtFoot();
    Script.Require("SmartWalk.AntiForgery").AtFoot();
    Script.Require("SmartWalk.Common").AtFoot();

    var eventsUrl = Url.Action("List", "Event", new RouteValueDictionary {{"Parameters.Display", DisplayType.All.ToString()}}); 
    var myEventsUrl = Url.Action("List", "Event", new RouteValueDictionary {{"Parameters.Display", DisplayType.My.ToString()}}); 
    var baseUrl = Model.Parameters.Display == DisplayType.All ? eventsUrl : myEventsUrl;
    string linkClass;
}
    <div id="event-items">
        @Html.AntiForgeryTokenOrchard()    
    
        <div class="row">
            <div class="col-xs-8">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="@T("type event name...")" data-bind="value: query">
                    <span class="input-group-btn">
                        <button id="btnSearch" class="btn btn-default" type="button">@T("Search")</button>
                    </span>
                </div>
            </div>
        @if (WorkContext.CurrentUser != null) {
            <div class="col-xs-4">
                <!--
                    //We use hard coded urls (not for all, but for 'tricky' ones), because of orchard bug. Actually, we have named routes, but since orchard ver > 1.7.2 named routes are not working
                    //https://orchard.codeplex.com/workitem/20592
                    //Our code for url supposed to be Url.RouteUrl("CreateEvent") 
                    //As soon as this bug will be fixed, we'll replace hard coded urls. 
                    //Otherwise a lot of redundand code will needed to bypass this.
                -->
                <form action="/events/create">
                    <button type="submit" class="btn btn-primary">@T("Create <span class=\"hidden-xs\"> Event</span>")</button>
                </form>  
            </div>
        }
        </div>
        
        <div class="gap">
            <small>
            @if (WorkContext.CurrentUser != null) {
                <span>
                    @{
                        linkClass = Model.Parameters.Display == DisplayType.My ? "selected" : "default";
                    }
                    <a class="@linkClass" href="@string.Format("{0}?sort={1}", eventsUrl, Model.Parameters.Sort.ToString().ToLower())">@T("All Events")</a>
                    &nbsp;|&nbsp;
                    @{
                        linkClass = Model.Parameters.Display == DisplayType.All ? "selected" : "default";
                    }
                    <a class="@linkClass" href="@string.Format("{0}?sort={1}", myEventsUrl, Model.Parameters.Sort.ToString().ToLower())">@T("My Events")</a>
                    &nbsp;&nbsp;&nbsp;&nbsp;
                </span>
            }
                @T("Sort By"):&nbsp;
                @{
                    linkClass = Model.Parameters.Sort == SortType.Date ? "selected" : "default";
                }    
                <a class="@linkClass" href="@string.Format("{0}?sort={1}", baseUrl, SortType.Date.ToString().ToLower())">@T("Date")</a>
                &nbsp;|&nbsp;
                @{
                    linkClass = Model.Parameters.Sort == SortType.Title ? "selected" : "default";
                }    
                <a class="@linkClass" href="@string.Format("{0}?sort={1}", baseUrl, SortType.Title.ToString().ToLower())">@T("Title")</a>
            </small>
        </div>

       <div class="floating-container small-gap">
        @foreach (var item in (IList<EventMetadataVm>)Model.Data) {
            <a class="thumbnail floating bg-image-container default-rows" href="@Url.Action("View", new {eventId = item.Id})">
                <div class="header">
                    <h3>@item.DisplayName</h3>
			
                    <img class="scale" data-scale="best-fill" data-align="center" src="@item.DisplayPicture">
                </div>
				                
                <div class="info"><h4>@item.DisplayDate</h4></div>
            </a>
        }
           <!-- ko template: {name: "EventItemTemplate", foreach: items() } -->    
           <!-- /ko -->
           <div class="clearfix"></div>
       </div>           
    </div>

<script type="text/html" id="EventItemTemplate">
    <a class="thumbnail floating bg-image-container" data-bind="attr: {href: '@Url.Action("View", new { eventId = ""})/' + id()}">
        <div class="header">
            <h3 data-bind="text: displayName()"></h3>
			
            <img class="scale" data-scale="best-fill" data-align="center" data-bind="attr: {src: displayPicture()}">
        </div>
				
        <div class="info">
            @* TODO: To use common with server formatting pattern *@
            <h4 data-bind="text: displayDate()"></h4>
        </div>
    </a>   
</script>

@using (Script.Foot())
{
<script type="text/javascript">
    EventsViewModel = function(data, url) {
        var self = this;

        EventsViewModel.superClass_.constructor.call(self, data, url);

        self.addItem = function(event) {
            self.items.push(new EventViewModel(event));
            $("img.scale").imageScale(); // TODO: Move to KO's onTemplateLoaded
        };  
    };

    inherits(EventsViewModel, ListViewModel);

    $(function() {
        var viewModel = new EventsViewModel(
            @Html.Raw(JsonConvert.SerializeObject(Model.Parameters, JsonNetResult.Settings)), 
            '@Url.Action("GetEvents", "Event")');

        attachVerticalScroll(viewModel.getNextPage);

        ko.applyBindings(viewModel, document.getElementById("event-items"));

        $("#btnSearch").click(function() {
            $("a").remove(".default-rows");
            viewModel.search();
        });
        $("img.scale").imageScale();
    });    
</script>
}