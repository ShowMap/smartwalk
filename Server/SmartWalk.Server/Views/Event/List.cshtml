@using System.Globalization
@using Orchard.UI.Resources
@using SmartWalk.Server.Common.Utils
@using SmartWalk.Server.Extensions
@using SmartWalk.Server.Utils
@using SmartWalk.Server.ViewModels
@model IList<EventMetadataVm>
@{
    Style.Require("SmartWalk");

    Script.Require("ImageScale").AtFoot();
    Script.Require("SmartWalk.AntiForgery").AtFoot();
    Script.Require("SmartWalk.Common").AtFoot();

    var allowedActions = (AllowedActions)ViewData[ViewDataParams.AllowedActions];
    var parameters = (ListViewParametersVm)ViewData[ViewDataParams.ListParams];
    var culture = CultureInfo.GetCultureInfo(WorkContext.CurrentCulture);
    var eventsUrl = Url.Action("List", "Event", new {display = DisplayType.All}); 
    var myEventsUrl = Url.Action("List", "Event", new {display = DisplayType.My}); 
    var baseUrl = parameters.Display == DisplayType.All ? eventsUrl : myEventsUrl;
    string linkClass;

    Layout.Title = parameters.Display == DisplayType.My 
        ? T("My {0}", T("Events")) 
        : T("Events");
}
    <div id="event-items">
        @Html.AntiForgeryTokenOrchard()    
    
        <div class="row">
            <div class="col-xs-8">
                <input id="searchInput" type="text" class="form-control" placeholder="@T("Search events...")" data-bind="value: query, valueUpdate: 'afterkeydown'">
            </div>
        @if (allowedActions.CanCreate) {
            <div class="col-xs-4">
                <form action="@Url.Action("Create")">
                    <button type="submit" class="btn btn-primary">@T("Create {0}Event{1}", "<span class=\"hidden-xs\"> ", "</span>")</button>
                </form>  
            </div>
        }
        </div>
        
        <div class="gap toolbar">
            <small>
            @if (WorkContext.CurrentUser != null) {
                <span>
                    @{
                        linkClass = parameters.Display == DisplayType.All ? "selected" : "default";
                        var sortParam =
                            parameters.Sort == SortType.Title
                                ? "?sort=" + parameters.Sort.ToString().ToLower()
                                : string.Empty;
                    }
                    <a class="@linkClass" href="@string.Format("{0}{1}", eventsUrl, sortParam)">@T("All Events")</a>
                    &nbsp;|&nbsp;
                    @{
                        linkClass = parameters.Display == DisplayType.My ? "selected" : "default";
                    }
                    <a class="@linkClass" href="@string.Format("{0}{1}", myEventsUrl, sortParam)">@T("My Events")</a>
                    &nbsp;&nbsp;&nbsp;&nbsp;
                </span>
            }
                @T("Sort By"):&nbsp;
                @{
                    linkClass = parameters.Sort == SortType.Date ? "selected" : "default";
                }    
                <a class="@linkClass" href="@baseUrl">@T("Date")</a>
                &nbsp;|&nbsp;
                @{
                    linkClass = parameters.Sort == SortType.Title ? "selected" : "default";
                }    
                <a class="@linkClass" href="@string.Format("{0}?sort={1}", baseUrl, SortType.Title.ToString().ToLower())">@T("Title")</a>
            </small>
        </div>

        <div id="event-items-thumbs" class="floating-container small-gap">
    @{
        var res = ResourceManager.FindResource(new RequireSettings { Name = "SmartWalk.List.Initial", Type = "script" });
        if (res != null)
        {
            <script type="text/javascript">
                @HtmlUtil.Resource(res, WorkContext);
                
                var thumbsContext = { defaultWidth: 300 };

                function fitThumbs() {
                    sw.fitThumbs("event-items-thumbs", ".floating .header", thumbsContext);
                }

                fitThumbs();
            </script>
        }
    }
        @foreach (var item in Model) {
            <a class="thumbnail floating bg-image-container default-rows" href="@Url.Action("View", new {eventId = item.Id})">
                <div class="header">
                    <h3>@item.DisplayName()</h3>
			
                    <img class="scale" data-scale="best-fill" data-align="center" src="@item.DisplayPicture()" alt="">
                </div>
  
                <div class="info"><h4>@item.DisplayDate(culture)</h4></div>
            </a>
        }
            <!-- ko template: {name: "eventItemTemplate", foreach: items(), afterRender: sw.scaleImages } -->    
            <!-- /ko -->
            <div class="clearfix"></div>
        </div>

    @if (Model == null || Model.Count == 0)
    {
        <div class="empty-content-placeholder">
            @if (parameters.Display == DisplayType.My && allowedActions.CanCreate)
            {
                <p class="text-muted">@T("You do not have any created events yet. Please start with creating a new one.")</p>
                <form action="@Url.Action("Create")">
                    <button type="submit" class="btn btn-primary">@T("Create Event")</button>
                </form>
            }
            else
            {
                <p class="text-muted">@T("There are no events available at the moment.")</p>
            } 
        </div>
    }

        <div class="empty-content-placeholder" data-bind="fadeInVisible: searchedQuery() && (!items() || items().length == 0)">
            <p data-bind="html: '@T("Your search - <b>{0}</b> - did not match any events.")'.format(searchedQuery())"></p>
        </div>

        <div class="gap">
@Html.Partial("../ServerErrors")
        </div>

        <div class="gap text-center">
            <img class="loading" src='@Href("../../Images/loading.gif")' width="16" height="16" alt="Loading..." data-bind="fadeVisible: isBusy" />
        </div>        
    </div>

<script type="text/html" id="eventItemTemplate">
    <a class="thumbnail floating bg-image-container" data-bind="attr: {href: '@Url.Action("View", new { eventId = ""})/' + id()}">
        <div class="header">
            <h3 data-bind="text: sw.ext.displayName($data)"></h3>
			
            <img class="scale" data-scale="best-fill" data-align="center" data-bind="attr: {src: sw.ext.displayPicture($data)}" alt="">
        </div>
				
        <div class="info">
            <h4 data-bind="text: sw.ext.displayDate($data)"></h4>
        </div>
    </a>   
</script>

@using (Script.Foot())
{
    @Display(New.MomentLocalization())

<script type="text/javascript">
    EventsViewModel = function(data, url) {
        var self = this;

        EventsViewModel.superClass_.constructor.call(self, data, url);

        self.addItem = function(event) {
            self.items.push(new EventViewModel(event));
        };  
    };

    sw.inherits(EventsViewModel, ListViewModel);

    $(function() {
        var viewModel = new EventsViewModel(
            @Html.Raw(JsonConvert.SerializeObject(parameters, JsonNetResult.Settings)), 
            '@Url.Action("GetEvents", "Event")');

        sw.attachVerticalScroll(viewModel.getNextPage);

        ko.applyBindings(viewModel, document.getElementById("event-items"));

        $("#searchInput").keypress(function() {
            $("a").remove(".default-rows");
        });

        $("img.scale").imageScale();
        
        $(window).resize(function() {
            if (typeof fitThumbs !== "undefined") {
                fitThumbs();
            }
        });
    });    
</script>
}