@using SmartWalk.Server.ViewModels
@using SmartWalk.Server.Records

@Display(New.DatePickerLocalization())

@{
    Style.Require("jQueryUI_Orchard");
    Style.Require("SmartWalk.ListEvent");

    //Script.Require("jQuery").AtHead();
    Script.Require("jQueryUI").AtHead();
    Script.Require("ko.datetime").AtHead();

    var eventItem = (EventMetadataFullVm)Model;
}
<div class="ui-widget">
    <button id="add-place-button">@T("Add place")</button>
</div>


<div id="event-item" save-event-url="@Url.Action("SaveEvent", "Event", new {area = "SmartWalk.Server"})">
    @Html.AntiForgeryTokenOrchard()
    <div id="metadata-panel">
        @Html.LabelFor(m => eventItem.EventMetadata.RegionId, @T("Region"))
        @Html.DropDownListFor(m => eventItem.EventMetadata.RegionId, eventItem.Regions.Select(u => new SelectListItem
        {
            Selected = u.Id == eventItem.EventMetadata.HostId,
            Text = u.DisplayName,
            Value = u.Id.ToString()
        }), new Dictionary<string, object> { { "data-bind", "value: RegionId, event: {blur: RegionIdOnBlur}" } })

        @Html.LabelFor(m => eventItem.EventMetadata.HostId, @T("Host"))
        @Html.DropDownListFor(m => eventItem.EventMetadata.HostId, eventItem.Hosts.Select(u => new SelectListItem
        {
            Selected = u.Id == eventItem.EventMetadata.HostId,
            Text = u.DisplayName,
            Value = u.Id.ToString()
        }), new Dictionary<string, object> { { "data-bind", "value: HostId, event: {blur: HostIdOnBlur}" } })
        
        <div class="ui-widget">
            <button id="add-host-button">@T("Add host")</button>
        </div>


        <label for="title">@T("Title")</label>
        <input type="text" id="title" data-bind="value: Title"/>
        
        <label for="description">@T("Description")</label>
        <textarea id="description" data-bind="value: Description"></textarea>
        
        <label for="start-time">@T("Start time")</label>
        <input type="text" data-bind="datepicker: StartTime, datepickerOptions: { showAnim: '' }" />
        
        <label for="end-time">@T("End time")</label>
        <input type="text" id="end-time" data-bind="datepicker: EndTime, datepickerOptions: { showAnim: '' }"/>
        
        @Html.LabelFor(m => eventItem.EventMetadata.CombineType, @T("Combine type"))
        @Html.DropDownListFor(m => eventItem.EventMetadata.CombineType,
                              Enum.GetNames(typeof(CombineType))
                                  .Select(u => new SelectListItem
                                  {
                                      Selected = (int)Enum.Parse(typeof(CombineType), u) == eventItem.EventMetadata.CombineType,
                                      Text = @T(u).ToString(),
                                      Value = ((int)Enum.Parse(typeof(CombineType), u)).ToString()
                                  }), new Dictionary<string, object> { { "data-bind", "value:CombineType, event: {blur: CombineTypeOnBlur}" } })
        
        @Html.LabelFor(m => eventItem.EventMetadata.IsPublic, @T("Is public"))
        @Html.CheckBoxFor(m => eventItem.EventMetadata.IsPublic, new Dictionary<string, object> { { "data-bind", "checked: IsPublic" } })
                
        
        <div id="shows-panel">
            <ul data-bind="visible: Shows().length > 0, foreach: Shows">
                <li>
                    <label data-bind="attr: { for: 'show-title-' + Id() }">@T("Title")</label>
                    <input type="text" data-bind="attr: {id:'show-title-' + Id()}, value: Title"/>
        
                    <label data-bind="attr: { for: 'show-description-' + Id() }">@T("Description")</label>
                    <textarea data-bind="attr: { id: 'show-description-' + Id() }, value: Description"></textarea>
                    
                    <a href="#" data-bind="click: $root.removeShow">Remove</a>                    
                </li>
            </ul>
            <button data-bind="click: addShow">@T("Add show")</button>        
        </div>
    </div>
</div>

<script language="javascript">

    function ShowViewModel(data) {
        var self = this;
        
        self.Id = ko.observable(data.Id);
        self.VenueId = ko.observable(data.VenueId);
        self.IsReference = ko.observable(data.IsReference);
        self.Title = ko.observable(data.Title);
        self.Description = ko.observable(data.Description);
        self.StartDate = ko.observable(data.StartDate);
        self.StartTime = ko.observable(data.StartTime);
        self.EndDate = ko.observable(data.EndDate);
        self.EndTime = ko.observable(data.EndTime);
        self.Picture = ko.observable(data.Picture);
        self.DetailsUrl = ko.observable(data.DetailsUrl);
    }

    function EventViewModel(data) {
        var self = this;

        self.Id = ko.observable(data.EventMetadata.Id);
        self.HostId = ko.observable(data.EventMetadata.HostId);
        self.RegionId = ko.observable(data.EventMetadata.RegionId);
        self.HostName = ko.observable(data.EventMetadata.HostName);

        self.Title = ko.observable(data.EventMetadata.Title);
        self.Description = ko.observable(data.EventMetadata.Description);
        self.StartTime = ko.observable(data.EventMetadata.StartTime);
        self.EndTime = ko.observable(data.EventMetadata.EndTime);

        self.CombineType = ko.observable(data.EventMetadata.CombineType);
        self.IsPublic = ko.observable(data.EventMetadata.IsPublic);
        self.DateCreated = ko.observable(data.EventMetadata.DateCreated);
        self.DateModified = ko.observable(data.EventMetadata.DateModified);

        self.Shows = ko.observableArray($.map(data.Shows, function(item) { return new ShowViewModel(item); }));
        
        // Operations
        self.addShow = function () {
            self.Shows.push(new ShowViewModel({ Id: 0, VenueId: 0, IsReference: false, Title: "Title", Description: "Contact" }));
        };

        self.removeShow = function (item) { self.Shows.remove(item); };

        self.save = function () {
            var token = '@Html.AntiForgeryTokenValueOrchard()';
            var headers = {};
            // other headers omitted
            headers['__RequestVerificationToken'] = token;

            var ajdata = self ? ko.toJSON(self) : null;

            var urlUpdate = $("#event-item").attr("save-event-url");

            var config = {
                async: true,
                url: urlUpdate,
                type: "POST",
                headers: headers,
                data: ajdata,
                dataType: "json",
                cache: false,
                contentType: "application/json; charset=utf-8",
                __RequestVerificationToken: token,
                error: function (e) {
                },
                success: function (data) {
                }
            };
            $.ajax(config);
        };

        self.CombineTypeOnBlur = function() {
            //self.save();
        };

        self.HostIdOnBlur = function () {
            //self.save();
        };
        
        self.RegionIdOnBlur = function () {
            //self.save();
        };
    }    

    (function ($) {        
        $(document).ready(function () {
            var vm = new EventViewModel(@Html.Raw(Json.Encode(eventItem)));
            ko.applyBindings(vm, document.getElementById('event-item'));            
        });
    })(jQuery);
</script>