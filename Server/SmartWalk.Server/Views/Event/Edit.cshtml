@using SmartWalk.Server.Extensions
@using SmartWalk.Server.ViewModels
@using SmartWalk.Server.Records
@model EventMetadataVm
@{
    Style.Require("jQueryUI");
    Style.Require("jQueryUI.TimePicker");
    Style.Require("SmartWalk");

    Script.Require("ImageScale").AtFoot();
    Script.Require("jQueryUI.TimePicker").AtFoot();
    Script.Require("ko.datetime").AtFoot();
    Script.Require("ko.switcher").AtFoot();
    Script.Require("ko.autocomplete").AtFoot();
    Script.Require("SmartWalk.AntiForgery").AtFoot();
    Script.Require("SmartWalk.Editing.Event").AtFoot();

    const string hostFormId = "edit-host-form-dialog";
    const string venueFormId = "edit-venue-form-dialog";

    var cancelAction = Model.Id == 0 
        ? Url.Action("List") 
        : Url.Action("View", new { eventId = @Model.Id });
}

<div id="event-item">
        @Html.AntiForgeryTokenOrchard()
        @Html.Partial("../ServerErrors")

        <div class="row">
			<div class="col-xs-8" data-bind="validationElement: data.title">
			    <div class="form-group">
			        <label class="titleLabel" for="eventTitleTextInput">@T("Event Title"):</label>
			        <input id="eventTitleTextInput" class="form-control" type="text" placeholder="@T("Type event title...")" data-bind="value: data.title, enable: isEnabled" />
			    </div>
			</div>
            <div class="col-xs-4 text-right">
                <img class="loading" src='@Href("../../Images/loading.gif")' width="16" height="16" alt="Loading..." data-bind="fadeVisible: isBusy" />
                <button type="button" class="btn btn-success" data-bind="click: saveEvent, enable: isEnabled">@T("Save") <span class="hidden-xs">@T("Event")</span></button>
            </div>
		</div>

        <div class="row">
			<div class="col-sm-4" data-bind="validationElement: data.startDate">
				<div class="form-group">
					<label for="startDateInput">@T("Start Date"):</label>
					<input type="date" class="form-control" id="startDateInput" data-bind="datepicker: data.startDate, enable: isEnabled">
				</div>
			</div>
			<div class="col-sm-4" data-bind="validationElement: data.endDate">
				<div class="form-group">
					<label for="endDateInput">@T("End Date"):</label>
					<input type="date" class="form-control" id="endDateInput" data-bind="datepicker: data.endDate, enable: isEnabled">
				</div>
			</div>
			<div class="col-sm-4">
				<div class="form-group">
					<label for="visibilityButtonsGroup">@T("Visibility"):</label><br/>
					<div class="btn-group" id="visibilityButtonsGroup" data-bind="switcher: data.isPublic, switcherOptions: { values: [{'val':true, 'disp':'@T("Public")'}, {'val':false, 'disp':'@T("Private")'}], enable: isEnabled}"></div>
				</div>
			</div>
		</div>	    

        <div class="row">
            <div class="col-sm-8" data-bind="validationElement: data.host">
                <div class="form-group">
                    <label for="organizedByComboBox">@T("Organized By"):</label>
                    <div class="input-group">
                        <input class="form-control" id="organizedByComboBox" placeholder="@T("Select Organizer...")" data-bind="
                            jqAuto: {
                                value: hostData,
                                source: getAutocompleteHosts,
                                inputProp: 'Name',
                                template: 'autocompleteEntityItemTemplate'
                            },
                            validationTag: data.host,
                            enable: isEnabled" />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default" id="createOrganizerButton" data-bind="click: createHost, enable: isEnabled">@T("Create")<span class="hidden-xs"> @T("Organizer")</span>...</button>
                        </span>
                    </div>
                </div>
            </div>
            @*<div class="col-sm-4">
				<div class="form-group">
					<label for="combinetypeButtonsGroup">@T("Combine type"):</label><br/>
					<div class="btn-group" id="combinetypeButtonsGroup" data-bind="switcher: data.combinetype, switcherOptions: { values: [{'val':0, 'disp':'@T("None")    '}, {'val':1, 'disp':'@T("By Venue")    '}, {'val':2, 'disp':'@T("By Organizer")    '}], enable: isEnabled}"></div>
				</div>
			</div>            
            *@
		</div>		       
        
        <div class="row">
			<div class="col-sm-8" data-bind="validationElement: data.picture">
				<div class="form-group">
					<label for="pictureTextInput">@T("Picture"):</label>
					<input id="pictureTextInput" class="form-control" type="text" placeholder="@T("Paste picture URL")" data-bind="value: data.picture, enable: isEnabled"/>
				</div>
			</div>
		</div>
		
		<div class="row">
			<div class="col-sm-8">
				<div class="form-group">
					<label for="descriptionTextArea">@T("Description"):</label>
					<textarea class="form-control" id="descriptionTextArea" data-bind="value: data.description, enable: isEnabled"></textarea>
				</div>
			</div>
		</div>
    
        <div class="row gap" data-bind="visible: isMultiday">
            <div class="col-md-12">
                <ul class="event-days-picker" data-bind="template: { name: 'multiDayItemTemplate', foreach: days }"></ul>
            </div>
        </div>                                              
 
        <div class="row add-venue" data-bind="visible: venuesManager.items().length > 0">
            <a data-bind="click: function () { if (isEnabled()) venuesManager.addItem(); }, css: {disabled: !isEnabled()}"><span class="glyphicon glyphicon-plus-sign"></span> @T("Add Venue")</a>
        </div>
       
        <table class="table table-hover edit">
			<thead>
				<tr>
					<th><h4>@T("Venues and Shows")</h4></th>
					<th>@T("Show Time")</th>
					<th class="td-align"></th>
				</tr>
			</thead>
			<tbody data-bind="template: { name: 'entityItemTemplate', foreach: venuesManager.items() }"></tbody>
		</table>
    
        <div class="row add-venue" data-bind="visible: $.grep(venuesManager.items(), function (venue) { return venue.isEditing() }).length == 0">
            <a data-bind="click: function () { if (isEnabled()) venuesManager.addItem(); }, css: {disabled: !isEnabled()}"><span class="glyphicon glyphicon-plus-sign"></span> @T("Add Venue")</a>
        </div>

        <div class="row double-gap">
            <div class="col-xs-4">
                @if (Model.Id != 0) {
                    using(Html.BeginForm("DeleteEvent", "Event", FormMethod.Get)) {
                        <input type="hidden" name="eventId" value="@Model.Id" />
                        <button type="submit" class="btn btn-danger" data-bind="enable: isEnabled" onclick="return confirm('@T("Are you shure you wish to delete this event?")')" >@T("Delete") <span class="hidden-xs">@T("Event")</span></button>
                    }
                }                
            </div>
            <div class="col-xs-8 text-right">
                <img class="loading" src='@Href("../../Images/loading.gif")' width="16" height="16" alt="Loading..." data-bind="fadeVisible: isBusy" />
                <button type="button" class="btn btn-default" data-bind="click: cancelEvent">@T("Cancel")</button>
                <button type="button" class="btn btn-success" data-bind="click: saveEvent, enable: isEnabled">@T("Save") <span class="hidden-xs">@T("Event")</span></button>        
            </div>
        </div>
    </div>

@Html.Partial(
    "../Entity/Edit", 
    new EntityVm { Type = (int)EntityType.Host },
    new ViewDataDictionary {{"EntityFormId", hostFormId }})

@Html.Partial(
    "../Entity/Edit", 
    new EntityVm { Type = (int)EntityType.Venue },
    new ViewDataDictionary {{"EntityFormId", venueFormId }})

@using (Script.Foot())
{
    @Display(New.MomentLocalization())
    @Display(New.DatePickerLocalization())
    @Display(New.TimePickerLocalization())

    @Html.Partial("Templates")

<script type="text/javascript">
    $(function() {
        var data = @Html.Raw(JsonConvert.SerializeObject(Model, JsonNetResult.Settings));
            
        var settings = {
            startTimeRequiredValidationMessage: '@T("Start time is required.")',
            endTimeCompareValidationMessage: '@T("End time has to be greater or equal than start time.")',
            startTimeCompareValidationMessage: '@T("Start time has to be less or equal than end time.")',
            hostRequiredValidationMessage: '@T("Organizer is required.")',
            venueRequiredValidationMessage: '@T("Venue is required.")',

            pictureLengthValidationMessage: '@T("Picture url can not be longer than 255 characters.")',
            picturePatternValidationMessage: '@T("Picture url does not match url pattern.")',
                  
            showMessages: {
                titleRequiredValidationMessage: '@T("Show title is required.")',
                titleLengthValidationMessage: '@T("Show title can not be longer than 255 characters.")',
                    
                pictureValidationMessage: '@T("Picture does not match url pattern.")',
                pictureLengthValidationMessage: '@T("Picture can not be longer than 255 characters.")',
                    
                detailsValidationMessage: '@T("Details does not match url pattern.")',
                detailsLengthValidationMessage: '@T("Details can not be longer than 255 characters.")',
                    
                startDateValidationMessage: '@T("Show start date has to be between event start and end dates.")',
                startTimeValidationMessage: '@T("Show start time has to be less than end time.")',
                    
                endDateValidationMessage: '@T("Show end date has to be between event start and end dates.")',
                endTimeValidationMessage: '@T("Show end time has to be bigger than start time.")',
            },
            
            dialogCancelText: '@T("Cancel")',
            dialogCreateVenueText: '@T("Create Venue")',
            dialogCreateHostText: '@T("Create Organizer")',
            dialogAddVenueText: '@T("Add Venue")',
            dialogAddHostText: '@T("Add Organizer")',

            hostFormName: "#@hostFormId",
            venueFormName: "#@venueFormId",
                
            eventSaveUrl: '@Url.Action("SaveEvent", "Event")',
            eventAfterCancelAction: function() {
                window.location.href = "@cancelAction";
            },
            eventAfterSaveAction: function(id) {
                window.location.href = '@Url.Action("View", new { eventId = ""})/' + id;
            },
    
            showView: "showItemTemplate",
            showEditView: "showItemTemplateEdit",

            eventVenueView: "eventVenueItemTemplate",
            eventVenueEditView: "eventVenueItemTemplateEdit",
            
            loadingTemplate: "loadingImgTemplate",

            hostAutocompleteUrl: '@Url.Action("AutoCompleteEntity", "Host")',
            venueAutocompleteUrl: '@Url.Action("AutoCompleteEntity", "Venue")',                               
        };

        var vm = new EventViewModelExtended(settings, data);
        ko.applyBindings(vm, document.getElementById("event-item"));

        $("img.scale").imageScale();
    });
</script>
}