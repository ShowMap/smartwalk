@using SmartWalk.Server.ViewModels
@using SmartWalk.Server.Records
@model EventMetadataVm
@{
    Style.Require("SmartWalk");

    Script.Require("ImageScale").AtFoot();
    Script.Require("ko.datetime").AtFoot();
    Script.Require("ko.switcher").AtFoot();
    Script.Require("ko.autocomplete").AtFoot();
    Script.Require("SmartWalk.AntiForgery").AtFoot();
    Script.Require("SmartWalk.ViewModels.Event.Extended").AtFoot();

    const string hostFormId = "edit-host-form";
    const string venueFormId = "edit-venue-form";

    var cancelAction = Model.Id == 0 
        ? Url.Action("List") 
        : Url.Action("View", new { entityId = @Model.Id });
}

<div id="event-item" 
    save-event-url="@Url.Action("SaveEvent", "Event")" 
    save-show-url="@Url.Action("SaveShow", "Event")"
    get-show-url="@Url.Action("GetShow", "Event")"
    delete-show-url="@Url.Action("DeleteShow", "Event")"
    delete-event-url="@Url.Action("DeleteEvent", "Event")"
    delete-venue-url="@Url.Action("DeleteEventVenue", "Event")"
    delete-venues-url="@Url.Action("DeleteEventVenues", "Event")"
    delete-event-shows-url="@Url.Action("DeleteEventShows", "Event")"
    save-venue-url="@Url.Action("SaveEventVenue", "Event")"
    host-autocomplete-url="@Url.Action("AutoCompleteHost", "Host")"
    venue-autocomplete-url="@Url.Action("AutoCompleteVenue", "Venue")">
        @Html.AntiForgeryTokenOrchard()

        <div class="row">
			<div class="col-xs-8" data-bind="validationElement: title">
			    <div class="form-group">
			        <label class="titleLabel" for="eventTitleTextInput">@T("Event Title"):</label>
			        <input id="eventTitleTextInput" class="form-control" type="text" placeholder="@T("Type event title...")" data-bind="value: title" />
			    </div>
			</div>
			<div class="col-xs-4 text-right">
				<button type="button" class="btn btn-success" data-bind="click: saveEvent">@T("Save") <span class="hidden-xs">@T("Event")</span></button>
			</div>
		</div>

        <div class="row">
			<div class="col-sm-4" data-bind="validationElement: startTime">
				<div class="form-group">
					<label for="startDateInput">@T("Start Date"):</label>
					<input type="date" class="form-control" id="startDateInput" data-bind="datepicker: startTime, datepickerOptions: { showAnim: '' }">
				</div>
			</div>
			<div class="col-sm-4" data-bind="validationElement: endTime">
				<div class="form-group">
					<label for="endDateInput">@T("End Date"):</label>
					<input type="date" class="form-control" id="endDateInput" data-bind="datepicker: endTime, datepickerOptions: { showAnim: '' }">
				</div>
			</div>
			<div class="col-sm-4">
				<div class="form-group">
					<label for="visibilityButtonsGroup">@T("Visibility"):</label><br/>
					<div class="btn-group" id="visibilityButtonsGroup" data-bind="switcher: isPublic, switcherOptions: { values: [{'val':true, 'disp':'@T("Public")'}, {'val':false, 'disp':'@T("Private")'}]}"></div>
				</div>
			</div>
		</div>	    

        <div class="row">
            <div class="col-sm-8">
                <div class="form-group">
                    <label for="organizedByComboBox">@T("Organized By"):</label>
                    <div class="input-group" data-bind="validationElement: host">
                        <input class="form-control" id="organizedByComboBox" placeholder="@T("Select Organizer...")" data-bind="
                            jqAuto: host,
                            jqOptions: EventViewModelExtended.AutocompleteOptions, 
                            jqAutoSource: allHosts, 
                            jqAutoValue: host, 
                            jqAutoQuery: getHosts, 
                            jqAutoSourceLabel: 'name', 
                            jqAutoSourceInputValue: 'name', 
                            jqAutoSourceValue: 'id', 
                            jqAutoItemText: EventViewModelExtended.getAutoEntityItem" />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default" id="createOrganizerButton" data-bind="click: createHost">@T("Create")<span class="hidden-xs"> @T("Organizer")</span>...</button>
                        </span>
                    </div>
                </div>
            </div>
            @*<div class="col-sm-4">
				<div class="form-group">
					<label for="combinetypeButtonsGroup">@T("Combine type"):</label><br/>
					<div class="btn-group" id="combinetypeButtonsGroup" data-bind="switcher: Combinetype, switcherOptions: { values: [{'val':0, 'disp':'@T("None")    '}, {'val':1, 'disp':'@T("By Venue")    '}, {'val':2, 'disp':'@T("By Organizer")    '}]}"></div>
				</div>
			</div>            
            *@
		</div>		       
        
        <div class="row">
			<div class="col-sm-8" data-bind="validationElement: picture">
				<div class="form-group">
					<label for="pictureTextInput">@T("Picture"):</label>
					<input id="pictureTextInput" class="form-control" type="text" placeholder="@T("Paste picture URL")" data-bind="value: picture"/>
				</div>
			</div>
		</div>
		
		<div class="row">
			<div class="col-sm-8">
				<div class="form-group">
					<label for="descriptionTextArea">@T("Description"):</label>
					<textarea class="form-control" id="descriptionTextArea" data-bind="value: description"></textarea>
				</div>
			</div>
		</div>                                                               
 
        <div class="row add-venue" data-bind="visible: venues().length > 0">
            <a data-bind="click: addVenue"><span class="glyphicon glyphicon-plus-sign"></span> @T("Add Venue")</a>
        </div>
       
        <table class="table table-hover edit">
			<thead>
				<tr>
					<th><h4>@T("Venues and Shows")</h4></th>
					<th>@T("Show Time")</th>
					<th class="td-align"></th>
				</tr>
			</thead>
			<tbody data-bind="template: { name: 'EntityItemTemplate', foreach: venues() }"></tbody>
		</table>
    
        <div class="row add-venue" data-bind="visible: selectedItem() == null || selectedItem().hasOwnProperty('venueId')">
            <a data-bind="click: addVenue"><span class="glyphicon glyphicon-plus-sign"></span> @T("Add Venue")</a>
        </div>

        <div class="row double-gap">
            <div class="col-xs-4">
                @if (Model.Id != 0) {
                    using(Html.BeginForm("DeleteEvent", "Event", FormMethod.Get)) {
                        <input type="hidden" name="eventId" value="@Model.Id" />
                        <button type="submit" class="btn btn-danger" onclick="return confirm('@T("Are you shure you wish to delete this event?")')" >@T("Delete") <span class="hidden-xs">@T("Event")</span></button>
                    }
                }                
            </div>
            <div class="col-xs-8 text-right">
                <form method="get" action="@cancelAction">
                    <button type="submit" class="btn btn-default">@T("Cancel")</button>
                    <button type="button" class="btn btn-success" data-bind="click: saveEvent">@T("Save") <span class="hidden-xs">@T("Event")</span></button>
                </form>		        
            </div>
        </div>
    </div>

@Html.Partial(
    "../Entity/EditTemplate", 
    new EntityVm
        {
            Id = 0, 
            EventMetadataId = Model.Id, 
            State = VmItemState.Normal, 
            Type = (int)EntityType.Host
        },
    new ViewDataDictionary {{"EntityFormId", hostFormId }})

@Html.Partial(
    "../Entity/EditTemplate", 
    new EntityVm
        {
            Id = 0, 
            EventMetadataId = Model.Id, 
            State = VmItemState.Normal, 
            Type = (int)EntityType.Venue
        },
    new ViewDataDictionary {{"EntityFormId", venueFormId }})

@using (Script.Foot())
{
    @Display(New.DatePickerLocalization())
    @Display(New.TimePickerLocalization())

    @Html.Partial("Templates")

<script type="text/javascript">
    $(function() {
        var form = $("#event-item");
        var data = @Html.Raw(Json.Encode(Model));
            
        var settings = {
            startTimeRequiredValidationMessage: '@T("Start time is required!")',
            endTimeCompareValidationMessage: '@T("End time has to be greater or equal than start time!")',
            startTimeCompareValidationMessage: '@T("Start time has to be less or equal than end time!")',
            hostRequiredValidationMessage: '@T("Organizer is required!")',
            venueRequiredValidationMessage: '@T("Venue is required!")',

            pictureLengthValidationMessage: '@T("Picture url can not be longer than 255 characters.")',
            picturePatternValidationMessage: '@T("Picture url does not match url pattern.")',
                  
            showMessages: {
                titleRequiredValidationMessage: '@T("Show title is required!")',
                titleLengthValidationMessage: '@T("Show title can not be longer than 255 characters!")',
                    
                pictureValidationMessage: '@T("Picture does not match url pattern.!")',
                pictureLengthValidationMessage: '@T("Picture can not be longer than 255 characters!")',
                    
                detailsValidationMessage: '@T("Details does not match url pattern.!")',
                detailsLengthValidationMessage: '@T("Details can not be longer than 255 characters!")',
                    
                startDateValidationMessage: '@T("Show start date has to be between event start and end dates.!")',
                startTimeValidationMessage: '@T("Show start time has bo be less than start time!")',
                    
                endDateValidationMessage: '@T("Show end date has to be between event start and end dates.!")',
                endTimeValidationMessage: '@T("Show end time has bo be bigger than start time!")',
            },

            hostFormName: "#@hostFormId",
            venueFormName: "#@venueFormId",
                
            eventSaveUrl: form.attr("save-event-url"),
    
            showGetUrl: form.attr("get-show-url"),
            showSaveUrl: form.attr("save-show-url"),
            showDeleteUrl: form.attr("delete-show-url"),
    
            showView: "ShowItemTemplate",
            showEditView: "ShowItemTemplateEdit",

            eventVenueSaveUrl: form.attr("save-venue-url"),
            eventVenueDeleteUrl: form.attr("delete-venue-url"),
            eventVenuesDeleteUrl: form.attr("delete-venues-url"),

            eventVenueView: "EventVenueItemTemplate",
            eventVenueEditView: "EventVenueItemTemplateEdit",

            eventShowsDeleteUrl: form.attr("delete-event-shows-url"),

            hostAutocompleteUrl: form.attr("host-autocomplete-url"),
            venueAutocompleteUrl: form.attr("venue-autocomplete-url"),                               
        };

        var vm = new EventViewModelExtended(settings, data);
        ko.applyBindings(vm, document.getElementById("event-item"));

        $("img.scale").imageScale();
    });
</script>
}